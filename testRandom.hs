{-
    Random Generators

    If failed to import System.Random, then install the random package
    first:

    cabal install random
-}

import System.Random (StdGen, mkStdGen, random, randoms, randomRs)

main :: IO ()
main = do
    numberString <- getLine
    let
        number = read numberString

    {-
    NOTE: the function signature of threeCoins and listNumbers determines
    the type of random values generated by "random StdGen" or "randoms StdGen"

    To generate a single random value of type Int, do

    (x, gen) = (random (mkStdGen 100)) :: (Int, StdGen)

    Or, if you want to generate a random value of Bool, do

    (y, gen) = (random (mkStdGen 100)) :: (Bool, StdGen)

    Where the number 100 can be replaced with any other Int values.
    -}
    -- print $ threeCoins (mkStdGen number)
    -- print $ take 5 $ listNumbers (mkStdGen number)
    print $ take 12 $ listLetters (mkStdGen number)


-- Take a standard generator (StdGen) and generate 3 random values
threeCoins :: StdGen -> (Bool, Bool, Bool)
threeCoins gen =
    let
        (firstCoin, newGen) = random gen
        (secondCoin, newGen') = random newGen
        (thirdCoin, _) = random newGen'
    in
        (firstCoin, secondCoin, thirdCoin)


{-
    Generate a list of random values using randoms function
-}
listNumbers :: StdGen -> [Int]
listNumbers gen =
    randoms gen


{-
    Generate a lsit of random values in a range: randomRs

    To generate one random number in a range, use randomR. For example,
    a random floating point value x in the range of (0, 1), we can do

    (x, gen) = randomR (0.0, 1.0) (mkStdGen 100)

    Or

    (x, gen) = randomR (0, 1) (mkStdGen 100) :: (Float, StdGen)

    Similarly, to generate an integer in the range of [1, 6] (inclusive),

    (x, gen) = randomR (1, 6) (mkStdGen 100)
-}
listLetters :: StdGen -> String
listLetters gen =
    randomRs ('a', 'z') gen
